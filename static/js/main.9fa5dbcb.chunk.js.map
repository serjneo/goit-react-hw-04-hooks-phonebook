{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","utils/filter.js","App.js","index.js"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","target","value","className","e","preventDefault","type","pattern","title","required","onChange","Filter","placeholder","ContactList","contacts","onRemove","map","contact","onClick","id","contactFilter","filter","toLowerCase","includes","trim","initialState","App","state","setState","useEffect","JSON","parse","localStorage","getItem","prevState","some","alert","newContact","shortid","generate","setItem","stringify","addContact","newContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+VAiEeA,MA7Df,YAAkC,IAAZC,EAAW,EAAXA,SAClB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACMC,EAAe,SAAAC,GACjB,MAAwBA,EAAMC,OAAtBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,OAAQP,GACJ,IAAK,OACDC,EAAQM,GACR,MACJ,IAAK,SACDJ,EAAUI,GACV,MACJ,QACI,SAWR,OACI,uBAAMC,UAAU,OAAOV,SARV,SAACW,GAClBA,EAAEC,iBACFZ,EAAS,CAAEE,OAAME,WACjBD,EAAQ,IACRE,EAAU,KAIN,UACI,kCACI,mBAAGK,UAAU,QAAb,mBACA,uBACIA,UAAU,QACVG,KAAK,OACLX,KAAK,OACLY,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRP,MAAOP,EACPe,SAAUX,OAGlB,kCACI,mBAAGI,UAAU,QAAb,qBACA,uBACIA,UAAU,QACVG,KAAK,MACLX,KAAK,SACLY,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRP,MAAOL,EACPa,SAAUX,OAGlB,wBAAQI,UAAU,SAASG,KAAK,SAAhC,6B,MCzCDK,MAZf,YAAsC,IAApBT,EAAmB,EAAnBA,MAAOQ,EAAY,EAAZA,SACrB,OACI,uBAAOP,UAAU,QAAQG,KAAK,OAAOX,KAAK,SAASe,SAAUA,EAAUR,MAAOA,EAC9EU,YAAY,oB,MCiBLC,MApBf,YAA8C,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC7B,OACI,oBAAIZ,UAAU,OAAd,SACKW,EAASE,KAAI,SAAAC,GAAO,OACjB,+BACI,oBAAGd,UAAU,QAAb,mBAA6Bc,EAAQtB,QACrC,oBAAGQ,UAAU,QAAb,qBAA8Bc,EAAQpB,UACtC,wBAAQM,UAAU,SAASe,QAAS,kBAAKH,EAASE,EAAQE,KAAKb,KAAK,SAApE,sBAHKW,EAAQE,UCDlBC,MANf,SAAuBN,EAAUO,GAC/B,OAAOP,EAASO,QAAO,qBAAG1B,KACnB2B,cAAcC,SAASF,EAAOG,OAAOF,mBCKxCG,EAAe,CACnB,CAAEN,GAAI,OAAQxB,KAAM,gBAAiBE,OAAQ,aAC7C,CAAEsB,GAAI,OAAQxB,KAAM,iBAAkBE,OAAQ,aAC9C,CAAEsB,GAAI,OAAQxB,KAAM,gBAAiBE,OAAQ,aAC7C,CAAEsB,GAAI,OAAQxB,KAAM,iBAAkBE,OAAQ,cAkEjC6B,MA/Df,WACE,MAA0BhC,mBAAS,CACjCoB,SAAUW,EACVJ,OAAQ,KAFV,mBAAOM,EAAP,KAAcC,EAAd,KAkDA,OA7CAC,qBAAU,WACR,IAAMf,EAAWgB,KAAKC,MAAMC,aAAaC,QAAQ,aAC7CnB,GACFc,GAAS,SAAAM,GAAS,kCAAUA,GAAV,IAAqBpB,SAAUA,SAElD,IAyCD,sBAAKX,UAAU,MAAf,UACE,cAAC,EAAD,CAAaV,SApBQ,SAAAwB,GACvBU,EAAMb,SAASqB,MAAK,qBAAGxC,OAAoBsB,EAAQtB,QAC/CyC,MAAM,yBAtBO,SAAAnB,GACjB,IAAMH,EAAWgB,KAAKC,MAAMC,aAAaC,QAAQ,aAC3CI,EAAU,aAAKlB,GAAImB,IAAQC,YAAetB,GAC5CH,EACFkB,aAAaQ,QACX,WACAV,KAAKW,UAAL,sBAAmB3B,GAAnB,CAA6BuB,MAG/BL,aAAaQ,QACX,WACAV,KAAKW,UAAL,sBAAmBd,EAAMb,UAAzB,CAAmCuB,MAGvCT,GAAS,SAAAM,GAAS,kCACbA,GADa,IAEhBpB,SAAS,GAAD,mBAAMoB,EAAUpB,UAAhB,CAA0BuB,SAOhCK,CAAWzB,MAkBb,cAAC,EAAD,CAAQf,MAAOyB,EAAMN,OAAQX,SANN,SAAC,GAAiC,IAAD,IAA9BT,OAAUN,EAAoB,EAApBA,KAAMO,EAAc,EAAdA,MAC5C0B,GAAS,SAAAM,GAAS,kCAAUA,GAAV,kBAAsBvC,EAAOO,UAM7C,cAAC,EAAD,CACEa,SAjBgB,SAAAI,GACpB,IAAMwB,EAAchB,EAAMb,SAASO,QAAO,SAAAJ,GAAO,OAAIA,EAAQE,KAAOA,KACpES,GAAS,SAAAM,GAAS,kCACbA,GADa,IAEhBpB,SAAU6B,OAEZX,aAAaQ,QAAQ,WAAYV,KAAKW,UAAUE,KAY5C7B,SAAUM,EAAcO,EAAMb,SAAUa,EAAMN,c,MCjEtDuB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.9fa5dbcb.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './ContactForm.scss';\r\n\r\nfunction ContactForm({onSubmit}) {\r\n    const [name, setName] = useState('');\r\n    const [number, setNumber] = useState('');\r\n    const handleChange = event => {\r\n        const { name, value } = event.target;\r\n        switch (name) {\r\n            case 'name':\r\n                setName(value);\r\n                break;\r\n            case 'number':\r\n                setNumber(value);\r\n                break;\r\n            default:\r\n                return;\r\n        }\r\n    }\r\n    \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        onSubmit({ name, number } );\r\n        setName('');\r\n        setNumber('');\r\n    }\r\n\r\n        return (\r\n            <form className=\"form\" onSubmit={handleSubmit}>\r\n                <label>\r\n                    <p className=\"title\">Name:</p>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n                        required\r\n                        value={name}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    <p className=\"title\">Number:</p>\r\n                    <input\r\n                        className=\"input\"\r\n                        type=\"tel\"\r\n                        name=\"number\"\r\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                        required\r\n                        value={number}\r\n                        onChange={handleChange}\r\n                    />\r\n                </label>\r\n                <button className=\"button\" type=\"submit\">Add contact</button>\r\n            </form>\r\n        );\r\n}\r\n\r\nContactForm.propTypes = {\r\n    handleSubmitForm: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;","import './Filter.scss';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction Filter({ value, onChange }) {\r\n    return (\r\n        <input className=\"input\" type=\"text\" name=\"filter\" onChange={onChange} value={value}\r\n        placeholder=\"search contact\"></input>\r\n    )\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import PropTypes from 'prop-types';\r\nimport './ContactList.scss';\r\n\r\nfunction ContactList({ contacts, onRemove }) {\r\n    return (\r\n        <ul className=\"list\">\r\n            {contacts.map(contact => (\r\n                <li key={contact.id}>\r\n                    <p className=\"title\">Name: { contact.name }</p>\r\n                    <p className=\"title\">Number: {contact.number}</p>\r\n                    <button className=\"button\" onClick={()=> onRemove(contact.id)} type=\"button\">Delete</button>\r\n                </li>   \r\n            ))}\r\n        </ul>\r\n    )\r\n};\r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({ id: PropTypes.string.isRequired })),\r\n    onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","function contactFilter(contacts, filter) {\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.trim().toLowerCase()),\r\n  );\r\n}\r\n\r\nexport default contactFilter;\r\n","import { useState, useEffect } from 'react';\nimport shortid from 'shortid';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\nimport contactFilter from './utils/filter';\n\nconst initialState = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nfunction App() {\n  const [state, setState] = useState({\n    contacts: initialState,\n    filter: '',\n  });\n\n  useEffect(() => {\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\n    if (contacts) {\n      setState(prevState => ({ ...prevState, contacts: contacts }));\n    }\n  }, []);\n\n  const addContact = contact => {\n    const contacts = JSON.parse(localStorage.getItem('contacts'));\n    const newContact = { id: shortid.generate(), ...contact };\n    if (contacts) {\n      localStorage.setItem(\n        'contacts',\n        JSON.stringify([...contacts, newContact]),\n      );\n    } else {\n      localStorage.setItem(\n        'contacts',\n        JSON.stringify([...state.contacts, newContact]),\n      );\n    }\n    setState(prevState => ({\n      ...prevState,\n      contacts: [...prevState.contacts, newContact],\n    }));\n  };\n\n  const handleSubmitForm = contact => {\n    state.contacts.some(({ name }) => name === contact.name)\n      ? alert('Contact alredy exists')\n      : addContact(contact);\n  };\n\n  const removeContact = id => {\n    const newContacts = state.contacts.filter(contact => contact.id !== id);\n    setState(prevState => ({\n      ...prevState,\n      contacts: newContacts,\n    }));\n    localStorage.setItem('contacts', JSON.stringify(newContacts));\n  };\n\n  const handleChangeFilter = ({ target: { name, value } }) => {\n    setState(prevState => ({ ...prevState, [name]: value }));\n  };\n  return (\n    <div className=\"App\">\n      <ContactForm onSubmit={handleSubmitForm} />\n      <Filter value={state.filter} onChange={handleChangeFilter} />\n      <ContactList\n        onRemove={removeContact}\n        contacts={contactFilter(state.contacts, state.filter)}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App.js';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}